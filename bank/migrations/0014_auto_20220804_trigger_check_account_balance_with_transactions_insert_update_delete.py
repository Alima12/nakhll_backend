# Generated by Django 3.2.14 on 2022-08-04 06:41

from django.db import migrations

from bank.constants import NAKHLL_ACCOUNT_ID


class Migration(migrations.Migration):

    dependencies = [
        ('bank',
         '0013_20220802_trigger_to_check_total_accounts_balance_with_minted_and_burned_coins'),
    ]

    operations = [
        migrations.RunSQL(f'''
            -- FUNCTION: public.check_account_balance_with_transactions()

            -- DROP FUNCTION IF EXISTS public.check_account_balance_with_transactions();

            CREATE OR REPLACE FUNCTION public.check_account_balance_with_transactions()
                RETURNS trigger
                LANGUAGE 'plpgsql'
                COST 100
                VOLATILE NOT LEAKPROOF
            AS $BODY$
            declare
                account_balance integer;
                account_transactions_summation integer;
				mint_coin_amount integer := 0;
				nakhll_account_id integer := {NAKHLL_ACCOUNT_ID};
            begin
                account_balance := (
                    select balance
                    from bank_account
                    where id = old.id
                );
                account_transactions_summation := (
                    select sum(value)
                    from bank_accounttransaction
					where account_id=old.id
                    );
				if new.id = nakhll_account_id then
					mint_coin_amount := bank_total_minted_not_burned_coins();
				else
					if account_balance <> account_transactions_summation + mint_coin_amount then
						raise exception 'account balance must be equal to transactions.';
					end if;
				end if;
                return new;
            end;
            $BODY$;

            ALTER FUNCTION public.check_account_balance_with_transactions()
                OWNER TO nakhll;
        ''', reverse_sql='DROP FUNCTION IF EXISTS public.check_account_balance_with_transactions();'),
        migrations.RunSQL('''
            CREATE CONSTRAINT TRIGGER check_account_balance_on_update_with_transactions
                AFTER UPDATE
                ON public.bank_account
                DEFERRABLE INITIALLY DEFERRED
                FOR EACH ROW
                EXECUTE FUNCTION public.check_account_balance_with_transactions();
        ''', reverse_sql='DROP TRIGGER IF EXISTS check_account_balance_on_update_with_transactions ON public.bank_accounttransaction;')
        migrations.RunSQL('''
            CREATE CONSTRAINT TRIGGER check_account_transactions_on_insert_with_account_balance
                AFTER INSERT
                ON public.bank_accounttransaction
                DEFERRABLE INITIALLY DEFERRED
                FOR EACH ROW
                EXECUTE FUNCTION public.check_account_balance_with_transactions();
        ''', reverse_sql='DROP TRIGGER IF EXISTS check_account_transactions_on_insert_with_account_balance ON public.bank_accounttransaction;')
    ]
